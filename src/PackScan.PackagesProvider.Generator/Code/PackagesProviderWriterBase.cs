using System.Diagnostics.CodeAnalysis;
using System.Reflection;

using CodegenCS;

using PackScan.PackagesProvider.Generator.Code.Documentation;
using PackScan.PackagesProvider.Generator.Files;
using PackScan.PackagesProvider.Generator.Info;
using PackScan.PackagesProvider.Generator.PackageContents;
using PackScan.PackagesProvider.Generator.Utils;

namespace PackScan.PackagesProvider.Generator.Code;

internal abstract class PackagesProviderWriterBase : INamespaceProvider
{
    private readonly IDocumentationReader _docReader;
    private FormattableString? _autoGeneratedComment;

    protected PackagesProviderWriterOptions Options { get; }

    protected bool Public => Options.Public;
    protected string ClassName => Options.ClassName;
    protected string? Namespace => Options.Namespace;
    protected bool NullableAnnotations => Options.NullableAnnotations;
    protected IProductInfoProvider? ProductInfoProvider => Options.ProductInfoProvider;
    protected ContentWriteMode ContentWriteMode => Options.ContentWriteMode;
    protected bool GenerateProjectFile => Options.GenerateProjectFile;
    protected IPackageContentProvider ContentProvider => Options.ContentProvider;
    protected CancellationToken CancellationToken => Options.CancellationToken;

    protected PackagesProviderWriterBase(IDocumentationReaderFactory docReaderFactory, PackagesProviderWriterOptions options)
    {
        _docReader = docReaderFactory.Create(this);

        Options = options;
    }

    bool INamespaceProvider.TryGetForWrite(string? ns, [MaybeNullWhen(false)] out string result)
    {
        result = GetOrNull(ns);

        return result is not null;

        string? GetOrNull(string? ns)
        {
            if (ns is null)
                return null;

            if (Namespace == ns)
                return null;

            return ns;
        }
    }

    public void CreateCode(IPackagesProviderFilesManager files)
    {
        CodegenContext codeContext = new();

        _docReader.ReadDocumentations(CancellationToken);

        if (GenerateProjectFile)
        {
            codeContext[$"{ClassName}.g.props"]
                .Write(CreatePackagesProviderProps());
        }

        AddCodeFiles(codeContext);

        foreach (ICodegenOutputFile? file in codeContext.OutputFiles)
            files.AddContents(file.RelativePath, file.GetContents());
    }

    protected abstract FormattableString CreatePackagesProviderProps();

    protected abstract void AddCodeFiles(ICodegenContext codeContext);

    protected string? TryGetDocumentation(MemberInfo? member)
    {
        if (member is null)
            return null;

        string? doc = _docReader.TryGet(member);

        if (doc is null)
            return null;

        return CreateDocumentationComment(doc);
    }
    protected string? TryGetDocumentation(Type declaringType, MemberTypes memberType, string memberName)
    {
        string? doc = _docReader.TryGet(declaringType, memberType, memberName);

        if (doc is null)
            return null;

        return CreateDocumentationComment(doc);
    }

    private string? CreateDocumentationComment(string? documentation)
    {
        if (documentation is null)
            return null;

        string[] lines = documentation.SplitByLine(StringSplitOptions.None);

        ApplyDocumentationComment(lines);

        return string.Join(Environment.NewLine, lines);
    }
    protected abstract void ApplyDocumentationComment(string[] documentationLines);

    protected FormattableString GetAutoGeneratedComment()
    {
        if (_autoGeneratedComment is not null)
            return _autoGeneratedComment;

        ProductInfo? productInfo = ProductInfoProvider?.GetProductInfo();

        return _autoGeneratedComment = CreateAutoGeneratedComment(productInfo);
    }
    protected abstract FormattableString CreateAutoGeneratedComment(ProductInfo? productInfo);

    protected Exception CreateContentWriteModeNotSupportedException()
    {
        return new NotSupportedException("Not supported content write mode: " + ContentWriteMode);
    }
}
